{"version":3,"sources":["assets/img/icon.png","services/storageService.js","services/weatherService.js","cmps/Search.jsx","services/customHooks.js","cmps/Preview.jsx","cmps/List.jsx","store/actions/weatherActions.js","pages/WeatherPage.jsx","cmps/Navbar.jsx","cmps/Favorite.jsx","pages/Favorites.jsx","App.jsx","serviceWorker.js","store/reducers/weatherReducer.js","store/store.js","index.js"],"names":["module","exports","gWeather","storageService","loadFromStorage","key","val","localStorage","getItem","JSON","parse","saveToStorage","stringify","weatherService","getWeather","getAutoComplete","getCityByCoords","loadFavorites","gFavorites","length","addFavorite","favorite","cityName","cityKey","removeFavorite","favoriteKey","filter","isStorage","lat","lng","a","city","axios","get","console","log","locationId","prmRes","then","res","data","keyword","Search","initialState","cb","useState","fields","setFields","useEffect","event","value","target","type","name","location","useForm","searchBy","handleChange","options","setOptions","getSearchedLocations","className","autoComplete","TextField","label","onChange","slice","map","option","Key","LocalizedName","Country","onClick","ev","Preview","iconNum","day","src","Day","Icon","alt","moment","Date","format","IconPhrase","Temperature","Minimum","Value","Maximum","href","Link","rel","List","weather","toggleFavorite","favorites","style","findIndex","fav","fontWeight","getStyle","Headline","Text","DailyForecasts","idx","dispatch","mapDispatchToProps","loadWeather","WeatherPage","connect","state","weatherReducer","setUserLocation","loc","coords","latitude","longitude","ParentCity","navigator","geolocation","getCurrentPosition","Fragment","Object","keys","Navbar","withRouter","navbar","document","querySelector","window","onscroll","pageYOffset","classList","add","remove","to","require","Favorite","Favorites","App","component","path","Boolean","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","subscribe","getState","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2e0ef780.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.528f75c9.png\";","function loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return (val) ? JSON.parse(val) : null;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage[key] = JSON.stringify(val);\r\n}\r\n\r\n\r\nexport const storageService = {\r\n    loadFromStorage,\r\n    saveToStorage\r\n}","import axios from 'axios'\r\nimport {storageService} from './storageService'\r\n\r\n\r\nexport const weatherService = {\r\n    getWeather,\r\n    getAutoComplete,\r\n    getCityByCoords,\r\n    loadFavorites,\r\n    addFavorite,\r\n    removeFavorite,\r\n    isStorage\r\n}\r\n\r\n\r\nconst KEY_WEATHER = 'weather';\r\nconst KEY_FAVORITES = 'favorites';\r\nlet gWeather;\r\nlet gFavorites = [];\r\n\r\nexport async function getCityByCoords(lat, lng) {\r\n    try {\r\n        const city = axios.get(`https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=z0766gk3hrdKoJ0iTWMryRUvQAuQYgkj&q=${lat},${lng}`)\r\n        return city;\r\n    } catch (err) {\r\n        console.log(err)\r\n        throw err\r\n    }\r\n}\r\n\r\nexport async function getWeather(locationId,cityName) {\r\n    if (!locationId) {\r\n        gWeather  = storageService.loadFromStorage(KEY_WEATHER);\r\n        if (gWeather) return gWeather;\r\n    } else {\r\n    var prmRes = axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationId}?apikey=s9LG1iE1JYDKGH9A5AeujArIo8xOyqjR&language=en-us&details=false&metric=false`)\r\n    return prmRes.then(res => {\r\n        res.data.cityName = cityName;\r\n        res.data.key = locationId;\r\n        storageService.saveToStorage(KEY_WEATHER,res.data)\r\n        return res.data\r\n    })\r\n}\r\n}\r\n\r\n\r\n\r\nexport async function getAutoComplete(keyword) {\r\n    var prmRes = axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=s9LG1iE1JYDKGH9A5AeujArIo8xOyqjR&q=${keyword}&language=en-us`)\r\n    return prmRes.then(res => {\r\n        return res.data\r\n    })\r\n}\r\n\r\nfunction addFavorite(favorite,cityName,cityKey){\r\n    favorite.cityName = cityName;\r\n    favorite.key = cityKey;\r\n    gFavorites = [...gFavorites,favorite]\r\n    storageService.saveToStorage(KEY_FAVORITES, gFavorites)\r\n    \r\n    return favorite;\r\n}\r\nfunction removeFavorite(favoriteKey){\r\n    gFavorites= gFavorites.filter(favorite=> favorite.key!==favoriteKey)\r\n    storageService.saveToStorage(KEY_FAVORITES, gFavorites)\r\n    return favoriteKey;\r\n}\r\nfunction loadFavorites(){\r\n    gFavorites= storageService.loadFromStorage(KEY_FAVORITES)\r\n    if(!gFavorites || !gFavorites.length) gFavorites=[];\r\n    return gFavorites\r\n}\r\n\r\n\r\nfunction isStorage() {\r\n    if (storageService.loadFromStorage(KEY_WEATHER)) return true;\r\n    else return false;\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useForm } from '../services/customHooks'\r\nimport { weatherService } from '../services/weatherService'\r\n\r\nexport function Search({getWeather}) {\r\n    const [searchBy, handleChange] = useForm({ location: '' })\r\n    const [options, setOptions] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getSearchedLocations()\r\n    }, [searchBy]);\r\n\r\n    async function getSearchedLocations() {\r\n        if (!searchBy.location) setOptions([]);\r\n        else {\r\n            const options = await weatherService.getAutoComplete(searchBy.location);\r\n            setOptions(options);\r\n        }\r\n    }\r\n\r\n    function onGetWeather(cityKey,cityName) {\r\n        getWeather(cityKey,cityName);\r\n        setOptions([]);\r\n        handleChange();\r\n    }\r\n\r\n    const { location } = searchBy;\r\n    return (\r\n        <div className=\"search-container flex justify-center align-center center\">\r\n            <form autoComplete=\"off\">\r\n                <TextField value={location} label=\"Search for city...\" name=\"location\" onChange={handleChange} />\r\n            </form>\r\n            <ul>\r\n                {options.length>0 && options.slice(0,3).map(option => <li key={option.Key}>{option.LocalizedName},{option.Country.LocalizedName} <i onClick={(ev) => onGetWeather(option.Key,option.LocalizedName)}className=\"fas fa-plus-circle\"></i></li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function useForm(initialState, cb = function () { }) {\r\n    const [fields, setFields] = useState(initialState);\r\n\r\n    useEffect(() => { cb(fields) }, [fields])\r\n\r\n    return [\r\n        fields,\r\n        function (event) {\r\n            if (!event) setFields({\r\n                location: ''\r\n            });\r\n            else {\r\n\r\n                const value = event.target.type === 'number' ? +event.target.value : event.target.value\r\n                setFields({\r\n                    ...fields,\r\n                    [event.target.name]: value\r\n                });\r\n            }\r\n        },\r\n\r\n    ];\r\n}","import React from 'react'\r\nimport moment from 'moment'\r\n\r\n\r\nexport function Preview({ day }) {\r\n\r\n    const getImg = (iconNum) => {\r\n            if (iconNum < 10) iconNum = '0' + iconNum\r\n            return `https://developer.accuweather.com/sites/default/files/${iconNum}-s.png`\r\n        }\r\n        \r\n    \r\n    return (\r\n        <div className=\"preview-container flex column\">\r\n            <div className=\"img-container\">\r\n            <img src={getImg(day.Day.Icon)} alt=\"\" />\r\n            </div>\r\n            <div className=\"info-container\">\r\n            <h3>{moment(new Date(day.Date)).format('L')}</h3>\r\n            <p className=\"description\">{day.Day.IconPhrase}</p>\r\n            <p>{day.Temperature.Minimum.Value}°-{day.Temperature.Maximum.Value}°</p>\r\n            <a href={day.Link} target=\"_blank\" rel=\"noopener noreferrer\"> <i className=\"fas fa-info-circle\"></i> Read More</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Preview } from './Preview'\r\n\r\nexport function List({ weather, cityKey, toggleFavorite, favorites }) {\r\n\r\n    const getStyle = () => {\r\n        const city = favorites.findIndex(fav => fav.key === cityKey);\r\n        if (city !== -1) return {fontWeight: '700'}\r\n    }\r\n\r\n    return (\r\n        <div className=\"list-container\">\r\n            <i className=\"far fa-heart\" style={getStyle()} onClick={(ev) => toggleFavorite(weather, weather.cityName, cityKey)}></i>\r\n            <h1>{weather.Headline.Text} at <span className=\"city\">{weather.cityName}</span></h1>\r\n            <section className=\"weather-list\">\r\n                {weather.DailyForecasts.map((day, idx) =>\r\n                    <Preview key={idx} day={day} />)}\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n","import { weatherService } from '../../services/weatherService'\r\n\r\n\r\nexport function loadWeather(cityKey = '',cityName='') {\r\n    return async dispatch => {\r\n        try {\r\n            const weather = await weatherService.getWeather(cityKey,cityName);\r\n            dispatch({ type: 'SET_WEATHER', weather })\r\n        } catch (err) {\r\n            console.log('weatherActions: couldn\\'t load weather');\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function addFavorite(weather,cityName,cityKey) {\r\n    return async dispatch => {\r\n        try {\r\n            console.log(weather)\r\n            const favorite = weatherService.addFavorite(weather,cityName,cityKey)\r\n            dispatch({ type: 'ADD_FAVORITE', favorite })\r\n        } catch (err) {\r\n            console.log('weatherActions: couldn\\'t add favorite');\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeFavorite(key) {\r\n    return async dispatch => {\r\n        try {\r\n            const favoriteKey = weatherService.removeFavorite(key)\r\n            dispatch({ type: 'REMOVE_FAVORITE', favoriteKey })\r\n        } catch (err) {\r\n            console.log('weatherActions: couldn\\'t remove favorite');\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n\r\nexport function loadFavorites() {\r\n    return async dispatch => {\r\n        try {\r\n            const favorites = await weatherService.loadFavorites()\r\n            dispatch({ type: 'SET_FAVORITES', favorites })\r\n        } catch (err) {\r\n            console.log('weatherActions: couldn\\'t load favorites');\r\n            throw err;\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {Search} from '../cmps/Search'\r\nimport {List} from '../cmps/List'\r\nimport { loadWeather,addFavorite, removeFavorite, loadFavorites} from '../store/actions/weatherActions'\r\nimport { weatherService } from '../services/weatherService';\r\n\r\n\r\n\r\n\r\nfunction _WeatherPage({loadWeather,weather,addFavorite,favorites,removeFavorite,loadFavorites}){\r\n\r\n\r\n    useEffect(() => {\r\n        const isStorage = weatherService.isStorage()\r\n        if (!isStorage) {\r\n        navigator.geolocation.getCurrentPosition(setUserLocation)\r\n        } else {\r\n            loadWeather();\r\n        }\r\n\r\n        loadFavorites();\r\n    }, [loadFavorites,loadWeather])\r\n    \r\n    async function setUserLocation(loc) {\r\n        const {latitude,longitude} = loc.coords\r\n        const city = await  weatherService.getCityByCoords(latitude,longitude)\r\n        getWeather(city.data.ParentCity.Key,city.data.ParentCity.LocalizedName)\r\n    }\r\n\r\n\r\n\r\n    async function getWeather(cityKey,cityName) {\r\n        await loadWeather(cityKey,cityName);\r\n    }\r\n\r\n    function setToggleFavorite(favorite,name,key) {\r\n        const currIdxFav = favorites.findIndex(fav => fav.key === key);\r\n        if (currIdxFav === -1) addFavorite(favorite,name,key)\r\n        else removeFavorite(key);\r\n\r\n    }\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Search getWeather={getWeather}/>\r\n                {weather && Object.keys(weather).length>0 && <List favorites={favorites} cityKey={weather.key} toggleFavorite={setToggleFavorite} weather={weather} cityName={weather.cityName}/>}\r\n            </React.Fragment>\r\n        \r\n        )\r\n    }\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weather: state.weatherReducer.weather,\r\n        favorites: state.weatherReducer.favorites\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadWeather,\r\n    addFavorite,\r\n    loadFavorites,\r\n    removeFavorite\r\n\r\n}\r\n\r\n\r\nexport const WeatherPage = connect(mapStateToProps, mapDispatchToProps)(_WeatherPage)","import React, {useEffect} from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport function _Navbar() {\r\n\r\n    useEffect(() => {\r\n        const navbar = document.querySelector('.navbar-container')\r\n        window.onscroll = function () {\r\n            if (window.pageYOffset > 0) {\r\n                navbar.classList.add('scrolled')\r\n\r\n            } else {\r\n                navbar.classList.remove('scrolled')\r\n\r\n            }\r\n        }\r\n    },[]);\r\n\r\n\r\n        return (\r\n            <div className=\"full main-container navbar-container\">\r\n                <Link to=\"/\"><div className=\"logo\"><img src={require('../assets/img/icon.png')} alt=\"logo_img\"/></div></Link>\r\n                <ul className=\"nav-list flex\">\r\n                    <li className=\"item-list\"><Link to=\"/\">Home</Link></li>\r\n                    <li className=\"item-list\"><Link to=\"/favorite\">Favorites</Link></li>\r\n                </ul>\r\n                </div>\r\n\r\n        )\r\n    \r\n}\r\n\r\nexport const Navbar = withRouter(_Navbar);\r\n\r\n","import React from 'react'\r\nimport {Preview} from '../cmps/Preview'\r\n\r\nexport function Favorite({ favorite, removeFavorite }) {\r\n    return (\r\n        <div className=\"favorite-list center flex column justify-center align-center main-container full\">\r\n            <i onClick={(ev) => removeFavorite(favorite.key)} className=\"fas fa-trash\"></i>\r\n            <h1>{favorite.cityName}</h1>\r\n            <div className=\"favorite-preview flex\">\r\n            {favorite.DailyForecasts.map((day, idx) =>\r\n                <Preview key={idx} day={day} />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loadFavorites,removeFavorite } from '../store/actions/weatherActions'\r\nimport {Favorite} from '../cmps/Favorite'\r\n\r\nexport function _Favorites({ loadFavorites, favorites,removeFavorite }) {\r\n    \r\n    useEffect(() => {\r\n        loadFavorites()\r\n    }, [loadFavorites])\r\n\r\n\r\n    return (\r\n        <div className=\"favorite-container\">\r\n            {favorites.length ? favorites.map(favorite =>\r\n                <Favorite key={favorite.key} favorite={favorite} removeFavorite={removeFavorite} />)\r\n                :\r\n                <h1 className=\"center\">No Favorites yet...</h1>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        favorites: state.weatherReducer.favorites\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    loadFavorites,\r\n    removeFavorite\r\n\r\n}\r\n\r\n\r\nexport const Favorites = connect(mapStateToProps, mapDispatchToProps)(_Favorites)","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { WeatherPage } from './pages/WeatherPage'\nimport {Navbar } from './cmps/Navbar'\nimport {Favorites} from './pages/Favorites'\n\n\n\n\nexport function App() {\n  return (\n    <div className=\"App main-container\" >\n      <Navbar/>\n      <Switch>\n        <Route component={Favorites} path='/favorite' />\n        <Route component={WeatherPage} path='/' />\n     \n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    weather: [],\r\n    favorites: []\r\n}\r\n\r\nexport function weatherReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_WEATHER':\r\n            return {\r\n                ...state,\r\n                weather: action.weather\r\n            }\r\n        case 'ADD_FAVORITE':\r\n            return {\r\n                ...state,\r\n                favorites: [...state.favorites, action.favorite]\r\n            }\r\n        case 'REMOVE_FAVORITE':\r\n            return {\r\n                ...state,\r\n                favorites: state.favorites.filter(favorite => favorite.key !== action.favoriteKey)\r\n            }\r\n        case 'SET_FAVORITES':\r\n            return {\r\n                ...state,\r\n                favorites: action.favorites\r\n            }\r\n    \r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport { weatherReducer } from './reducers/weatherReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    weatherReducer\r\n})\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n\r\n\r\nstore.subscribe(() => {\r\n    console.log('Global state is:', store.getState())\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store/store';\nimport './assets/scss/global.scss'\n\nReactDOM.render(\n    <Provider store={ store }>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}